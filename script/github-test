#!/bin/bash

. script/github-common

TEMPDIR="$(mktemp -d)"
trap 'rm -r "$TEMPDIR"' EXIT
pushd "$TEMPDIR"

# Download and upscale
curl -fsSL https://media.xiph.org/video/derf/y4m/flower_cif.y4m > input.y4m
ffmpeg \
  -i input.y4m \
  -filter_complex '
    [0:v] format=pix_fmts=yuv420p, extractplanes=y+u+v [y][u][v];
    [y] sr=dnn_backend=tensorflow:scale_factor=2:model=/models/espcn.pb [y_scaled];
    [u] scale=iw*2:ih*2 [u_scaled];
    [v] scale=iw*2:ih*2 [v_scaled];
    [y_scaled][u_scaled][v_scaled] mergeplanes=0x001020:yuv420p [merged]
  ' \
  -map '[merged]' \
  -sws_flags lanczos \
  -c:v libx264 \
  -crf 17 \
  -c:a copy \
  -y \
  output.mp4

# Test
INPUT_SIZE="$(ffprobe -v error -show_entries stream=width,height -of csv=p=0:s=x input.y4m)"
OUTPUT_SIZE="$(ffprobe -v error -show_entries stream=width,height -of csv=p=0:s=x output.mp4)"

EXPECTED_WIDTH=$((${INPUT_SIZE%x*} * 2))
EXPECTED_HEIGHT=$((${INPUT_SIZE#*x} * 2))
WIDTH=$((${OUTPUT_SIZE%x*} * 1))
HEIGHT=$((${OUTPUT_SIZE#*x} * 1))

if [[ "$WIDTH" != "$EXPECTED_WIDTH" ]]
then
  printf 'Produced video with width %d, expected %d\n' "$WIDTH" "$EXPECTED_WIDTH"
  exit 1
fi

if [[ "$HEIGHT" != "$EXPECTED_HEIGHT" ]]
then
  printf 'Produced video with height %d, expected %d\n' "$HEIGHT" "$EXPECTED_HEIGHT"
  exit 1
fi

# Clean up
rm input.y4m output.mp4

popd
